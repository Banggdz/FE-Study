list-style-type: chỉ định kiểu đánh dấu mục danh sách.
 <style>
        ul{
            list-style-type: square;
        }
    </style>
   <ul>
    <LI>Mục 1</LI>
    <li>Mục 2</li>
    <li>Mục 3</li>
   </ul>
list-style-type: disc; // Hình tròn đen. Mặc định.
list-style-type: circle; // Hình tròn có viền đen và trống bên trong.
list-style-type: square; // Hình vuông
list-style-type: disclosure-closed; // Hình tam giác trỏ sang phải
list-style-type: none; // Bị ẩn
list-style-type: upper-roman; // Chữ la mã I, II, III
list-style-type: lower-alpha; // Chữ cái a, b, c
-------------------------------------------------------
list-style-position: outside; // Các điểm đánh dấu nằm bên ngoài
list-style-position: inside; // Các điểm đánh dấu nằm bên trong
-----------------------------------------------------------
<style>
        table{
            border-collapse: collapse;
        }
        table th,td{
            border:1px solid #000;
            
        }
        th,td{
            padding:20px;
        }
        th{
            color:aliceblue;
            width:100px; ---> Cố định chiều rộng khi độ dài văn bản tăng
            background: orange;
        } </style> 
------------------------------------------------------------
 <style>
        .inline,.block,.inline-block{
            background:orange;
            border:1px solid #000
        }
        .block{
            display: block;
        }
        .inline-block{
            display: inline-block;
            width:20px
        }
.none{
  display:none; 
}
.visibility{
  visibility:hidden;
}
    </style>
display: inline; (không đặt được chiều rộng và chiều cao, không thêm được margin và padding cho bên trên và bên dưới)
display: block; (Chiều rộng kéo dài từ trái sang phải, luôn bắt đầu ở một hàng mới. Cho phép đặt chiều rộng và chiều cao, cho phép đặt margin, padding cho bên trên và bên dưới)
display: inline-block; (Chiều rộng mặc định bằng chiều rộng của element, không bắt đầu ở một hàng mới. Cho phép đặt chiều rộng và chiều cao, cho phép đặt margin, padding cho bên trên và bên dưới)
display: none; (Ẩn đi hoàn toàn)
<span class="inline">Thẻ inline 2</span>
<span class="block">Thẻ block 2</span>
<span class="none">ẩn</span>
-----------------
visibility: hidden; // Ẩn nhưng vẫn chiếm một khoảng trống
visibility: visible; // Hiển thị. mặc định.
-------------------------------
position: static; // Vị trí ở trạng thái mặc định của phần tử (các thuộc tính top, bottom, right, left không có hiệu lực)
position: relative; // Vị trí tương đối so với vị trí mặc định và áp dụng được các thuộc tính top, right, bottom, left.
position: absolute; // Vị trí tuyệt đối cho các thành phần theo thành phần bao ngoài hoặc cửa sổ trình duyệt.(RELATIVE)
position: fixed; // Được định vị so với khung nhìn (viewport), có nghĩa là nó luôn ở một vị trí cố định ngay cả khi trang được cuộn. Các thuộc tính top, right, bottom và left được sử dụng để định vị element.
position: sticky; // Có thể hiểu đơn giản là sự kết hợp của position: relative và position: fixed. Nó cũng na ná relative nhưng mà khi các bạn scroll đến vị trí của nó sẽ giống hệt như fixed và khi các bạn scroll lên ra khỏi nó thì nó sẽ quay lại vị trí ban đầu dưới dạng relative.
<style>
        .box1,.box2{
            background: orange;
            border:3px solid #000;
            width: 150px;
            height: 150px;
            font-size: 20px;
        }
        .box2{
            position: relative;
            top: 50px;left: 100px;
        }
        .box3{
            background: blue;
            border: 2px solid #999;
            width: 80px;
            height:80px;
            position: absolute;
            left:20px;
            top:30px
        }
        .box4{
            background: blue;
            border: 2px solid #999;
            width: 80px;
            height:80px;
            position: fixed;
            left:20px;
            top:30px
.header{
            position:sticky;
            top:0;left:0;
            background-color: darkorchid;
            width: 100%;
            z-index:1 ;
        }
        }
    </style>
    <div class="box1">Box1</div>
    <div class="box2">Box2<div class="box3">Box3</div></div>
    <div class="box4">Box4</div>
Thuộc tính z-index thiết lập thứ tự xếp chồng nhau của một thành phần vị trí.
Giá trị mặc định là 0.
z-index càng cao thì element đó càng nằm trên.
Chú ý: z-index chỉ làm việc cùng với thuộc tính position có giá trị sau: absolute, fixed, relative, sticky. Đối với giá trị static thì z-index không áp dụng được.
-----------------------------------
overflow xác định điều gì sẽ xảy ra nếu một thành phần box tràn nội dung.
overflow: visible; // Khi chiều cao của box không đủ chứa text, thì text vẫn hiển thị tràn qua box, đây là mặc định.
overflow: hidden; // Khi chiều cao của box không đủ chứa text, thì text bị tràn sẽ được ẩn đi.
overflow: scroll; // Khi chiều cao của box không đủ chứa text, thì text bị tràn sẽ được ẩn đi và xuất hiện thanh scroll, khi cuộn sẽ hiển thị text. Khi sử dụng thành phần này sẽ xuất hiện cả thanh scroll ngang và dọc.
overflow: auto; // Khi chiều cao của box không đủ chứa text, thì thanh scroll sẽ tự động hiển thị. Khi sử dụng thành phần này sẽ xuất hiện thanh scroll dọc.<style>
    .box{
        background: yellow;
        border: 3px solid #000;
        width: 100px;
        height:200px;
        overflow: auto;
    }
   </style>
   <div class="box">
    Cựu tiền đạo người Trôi.
   </div> 
----------------------------------Combinator selectors (Bộ chọn tổ hợp)--------------------------
Adjacent sibling selectors (Bộ chọn anh chị em liền kề)
<style>    CHỌN THẺ p ĐẦU TIÊN CÙNG CẤP NẰM NGÀY DƯỚI THẺ div
    div+p{
        background-color: yellow;
    }
   </style>
vd:<p>Nội dung 0</p>
   <div>
    <p>Nội dung 1</p>
    <p>Nội dung 2</p>
   </div>
   <p>Nội dung 3</p> -->chọn
   <p>Nội dung 4</p>
------------
<style>  
Tìm thg child trong parent; trong child tìm h3
    .parent .child h3{
    background-color:blue;
   }
   .parent>h3{
    background-color: orange;
   }
   </style>
   <h3>Nội dung khác</h3>
   <div class="parent">
    <h3>Nội dung</h3>
    <div class="child"><h3>Nội dung 1</h3></div>
    <div class="child"><h3>Nội dung 2</h3></div>
    <div class="child"><h3>Nội dung 3</h3></div>
    <div class="child"><h3>Nội dung 4</h3></div>
   </div>
-------------------
selector:pseudo-class {
	property: value;
}
:link: khi liên kết chưa được truy cập lần nào. (Chỉ dùng cho thẻ a)
:visited: khi liên kết đã được truy cập sau lần đầu tiên. (Chỉ dùng cho thẻ a)
:hover: khi di chuyển chuột lên element.
:active: khi phần tử được click vào, áp dụng cho tất cả các thẻ.
:first-child: thiết lập thuộc tính cho element đầu tiên.
:last-child: thiết lập thuộc tính cho element cuối cùng.
:nth-child(n): n có thể là các giá trị even (chẵn), odd (lẻ), một số, một biểu thức (an + b).
 <style>  
   
   a:link{
    color:yellow;
   }
   a{
    color: black;
   }
   a:visited{
    color:red;
   }
   a:hover{
    color:green;
   }
    .box{
        background-color: yellow;
        width: 100px; height:100px;
    }
    .box:hover{
        background-color:red;
    }
    .box i{
        display: none;
    }
    .box:active{
        background-color: brown;
    }
    .box:hover i{
        display:inline;
    }
   </style>
   <a href="#123" title="Đừng ấn">Youtube</a>
   <div class="box">Nội dung<i>Icon</i>
   </div>

<style>  
   ul li:first-child{
    background: purple;
   }
   ul li:nth-child(2n+1){
    background-color: aqua;
   }
   </style>
   <ul>
    <li>Mục 1</li>
    <li>Mục 2</li>
    <li>Mục 3</li>
    <li>Mục 4</li>
   </ul>>
--------
Pseudo-elements selectors  (Chỉ áp dụng 1 pseudo cho 1 element)
Được sử dụng để tạo ra một phần tử giả và định kiểu (style) cho phần tử giả đó mà không cần tạo ra một phần tử thật.
Cú pháp:
selector::pseudo-element {
	property: value;
}
::before: Chèn nội dung nào đó trước nội dung của mỗi element. (Phải thêm content: "";)
::after: Chèn nội dung nào đó sau nội dung của mỗi element. (Phải thêm content: "";)
::first-letter: Chọn chữ cái đầu tiên của mỗi element.
.box::first-letter{
   font-size:40px;
}
::first-line: Chọn dòng đầu tiên của mỗi element.
::marker: Chọn các điểm đánh dấu của các mục danh sách (thẻ <ul> và <ol>)
::selection:Style cho một vùng văn bản được người dùng chọn (hay còn gọi là "bôi đen"). Chỉ có một số thuộc tính css khả dụng với ::selection là color, background, cursor, và outline.
vd html(.box span{
    background-color: orange;
   }
   </style>
   <div class="box">
    <span>Nội dung đằng trước</span>
    Nội dung 1
   </div>)
css(.box::before{
        content:"v";
        background-color: orange;
        width: 20px;height:20px;
        padding-top:20px;
        margin-top:20px;
        border-radius: 50%;
        text-align:center;
        display: inline-block;
    }
   </style>
   <div class="box">
    Nội dung 1
   </div>)

ul li::marker{
    color:red;
   }
   </style>
   <ul>
    <li>Mục 1</li>
    <li>Mục 2</li>
    <li>Mục 3</li>
    <li>Mục 4</li>
   </ul>>
